plugins {
	id "fabric-loom" version "1.0.+"
	id "io.github.juuxel.loom-vineflower" version "1.+"
	id "io.github.p03w.machete" version "1.+"
	id "maven-publish"
}

base {
	archivesName = modid
}
version = "${minecraft_version}-${mod_version}-fabric"
group = maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		name = "Quilt Mappings"
		url = "https://maven.quiltmc.org/repository/release"
	}
	maven {
		name = "Parchment Mappings"
		url = "https://maven.parchmentmc.org"
	}
	maven {
		name = "Curseforge"
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}
	maven {
		name = "Mod Menu"
		url = "https://maven.terraformersmc.com/releases/"
	}
	maven {
		name = "Create Fabric"
		url = "https://mvn.devos.one/snapshots/"
	}
	maven {
		name = "Create Flywheel"
		url "https://maven.tterrag.com/"
	}
	maven {
		name = "Reach Entity Attributes"
		url = "https://maven.jamieswhiteshirt.com/libs-release"
	}
	maven {
		name = "Mixin Extras"
		url = "https://jitpack.io/"
	}
}

dependencies {
	// Fabric Minecraft
	minecraft("com.mojang:minecraft:${minecraft_version}")

	mappings(loom.layered {
		it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
	modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

	// QoL
	api("com.google.code.findbugs:jsr305:3.0.2")
	modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")
	modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")

	// Dependencies
	modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_version}")
}

loom {
	runs {
		datagen {
			client()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"
			vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
		}
	}
}

compileJava.options.encoding = 'UTF-8'

processResources {
	Map<String, String> properties = new HashMap<>()
	properties.put("modid", modid)
	properties.put("version", mod_version)
	properties.put("minecraft_version", minecraft_version)
	properties.put("fabric_loader_version", fabric_loader_version)
	properties.put("fabric_api_version", fabric_api_version)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

machete {
	enabled = Boolean.valueOf(compress)
}

prepareRemapJar {
	mustRunAfter "optimizeOutputsOfJar"
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release = 17
}

remapJar {
	destinationDirectory.set(file(output_dir))
}